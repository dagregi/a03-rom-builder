name: ROM Builder For Samsung Galaxy A03

permissions:
    contents: write

on:
    workflow_dispatch:
        inputs:
            GSI:
                description: "GSI Image Download Link"
                required: true
                default: "https://github.com/cawilliamson/treble_voltage/releases/download/4.5-20250717.114637/VoltageOS-microg-arm64-ab-4.5-20250717.114637-UNOFFICIAL.img.xz"
                type: string
            NAME:
                description: "ROM Name"
                required: true
                default: "VoltageOS-arm64-ab-microg-4.5-a03.7z"
                type: string
            VENDOR:
                description: "Vendor Image Download Link"
                required: true
                default: "https://download937.mediafire.com/56f7fw8r15zgAmSxXwQu15MKxt4OIOi3Sl3SwwzIxpQpYxcDtqQTdVPy_K5mMrGTHvOguGmisZi9HBzNiCkgse_r_bR92O9W-1ypUx90dFK1DN6iqyAOEVB2usGGn0Benoe_3bu5HkPNzZQ44JzZlS6VOtX9K89dCmhaTFwon9jpyLbm/dvjvj8sghw16dte/vendor.img"
                type: string

jobs:
    build:
        runs-on: ubuntu-latest
        timeout-minutes: 120

        steps:
            - name: Install Dependencies
              run: |
                  sudo apt-get update
                  sudo apt-get install -y zip xz-utils unzip p7zip-full wget curl atool

            - name: Clone LP Tools
              run: |
                  git clone https://github.com/Exynos-nigg/lpunpack-lpmake-mirror.git lpbinary
                  chmod +x lpbinary/binary/lpmake

            - name: Download and Extract GSI
              run: |
                  cd lpbinary/binary
                  wget -q --show-progress "${{ github.event.inputs.GSI }}" -O gsi_image
                  echo "Extracting GSI..."
                  FILE_TYPE=$(file -b gsi_image | awk '{print $1}')
                  if [[ "$FILE_TYPE" == 7-zip ]]; then
                    atool --format=7z --extract gsi_image
                  else
                    atool --format=$FILE_TYPE --extract gsi_image
                  fi
                  IMG_FILE=$(find . -name "*.img" -type f | head -1)
                  if [ -z "$IMG_FILE" ]; then
                    echo "Error: No .img file found after extraction!"
                    ls -la
                    exit 1
                  fi

                  mv "$IMG_FILE" system.img

            - name: Download Required Images
              run: |
                  cd lpbinary/binary
                  echo "Downloading vendor image..."
                  wget -q --show-progress "${{ github.event.inputs.VENDOR }}" -O vendor.img

                  echo "Downloading product image..."
                  wget -q --show-progress "https://download1075.mediafire.com/a7x2os6afokgCyH51sKSN14ceKZDbpw2Q4PWbYVPksvKYKzmlf7C6lmZND2qnw-p6Ia_n756nrWcC9AdxiY-wNE8XA4D-7IsWHvtXXAOti784ppU_oACNUXpyd9qShb0r-KgDIiToTbXRcdjpODuKwylJDo3YGTmlTTLD6lrgrqyz5w/dkbxtwremcfjclm/product.img" -O product.img

                  echo "Downloading system_ext image..."
                  wget -q --show-progress "https://download1589.mediafire.com/d342347mxalgMCfdx08pLls5z2f5UEEc6ZFupAsDoQIfQD6GNRvbDEVaDo7UEN8OUzdtLVanx05fdO64KiRoBExYtUXk8xnqBoCYuo_27X4pPkE7HSnEI0y-3mQ1IAVaBEaaYp8-BlYb9MnWPE7fumD2U9izrI2W11RvPLSBcC0rY0k/8hr8j4g15jqzalj/system_ext.img" -O system_ext.img

            - name: Verify Images
              run: |
                  cd lpbinary/binary
                  for img in system.img vendor.img product.img system_ext.img; do
                    if [ ! -f "$img" ]; then
                      echo "Error: $img not found!"
                      exit 1
                    fi
                  done

            - name: Create Super Image
              run: |
                  cd lpbinary/binary

                  SYSTEM_SIZE=$(stat -c%s system.img)
                  VENDOR_SIZE=$(stat -c%s vendor.img)
                  PRODUCT_SIZE=$(stat -c%s product.img)
                  SYSTEM_EXT_SIZE=$(stat -c%s system_ext.img)

                  ./lpmake --metadata-size 65536 \
                           --super-name super \
                           --metadata-slots 2 \
                           --device super:6763315200 \
                           --group main:6761218048 \
                           --partition system:readonly:${SYSTEM_SIZE}:main \
                           --image system=system.img \
                           --partition vendor:readonly:${VENDOR_SIZE}:main \
                           --image vendor=vendor.img \
                           --partition product:readonly:${PRODUCT_SIZE}:main \
                           --image product=product.img \
                           --partition system_ext:readonly:${SYSTEM_EXT_SIZE}:main \
                           --image system_ext=system_ext.img \
                           --sparse \
                           --output super.img

                  echo "Super image created successfully!"

            - name: Package ROM
              run: |
                  cd lpbinary/binary
                  echo "Creating tar archive..."
                  tar -cf super.tar super.img

                  echo "Compressing to 7z..."
                  7z a -t7z -mx=3 "${{ github.event.inputs.NAME }}" super.tar

                  rm -f super.img super.tar
                  echo "Final ROM package:"

            - name: Generate Release Notes
              id: release_notes
              run: |
                  cat << EOF > release_notes.md
                  **Device Information:**
                  - Device: Samsung Galaxy A03 (SM-A035F)
                  - [GSI](${{ github.event.inputs.GSI }})

                  **Installation Instructions:**
                  1. Download the ROM file
                  2. Extract the 7z archive
                  3. Flash using Odin, Heimdall or similar tool
                  4. Reboot and enjoy :)

                  **NOTE:** If you're not receiving SMS after flashing you can use this magisk [module](https://github.com/IverCoder/a03nnxx-ril-rollback) to fix it.

                  **Warning:** Flash at your own risk. Make sure to backup your device before flashing.
                  EOF

            - name: Upload ROM to Release
              uses: softprops/action-gh-release@v2
              with:
                  files: lpbinary/binary/${{ github.event.inputs.NAME }}
                  name: "${{ github.event.inputs.NAME }} - Build #${{ github.run_number }}"
                  tag_name: "build-${{ github.run_number }}-${{ github.run_id }}"
                  body_path: release_notes.md
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Clean up
              if: always()
              run: |
                  rm -rf lpbinary/
                  df -h
